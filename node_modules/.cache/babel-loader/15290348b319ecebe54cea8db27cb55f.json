{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rnayl2/sites/for_side/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rnayl2/sites/for_side/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/rnayl2/sites/for_side/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/rnayl2/sites/for_side/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { gitusersRef } from '../config/firebase';\nexport var UPDATE_CURRENT_VALUE = 'UPDATE_CURRENT_VALUE';\nexport var UPDATE_WORKING_LIST = 'UPDATE_WORKING_LIST';\nexport var UPDATE_GIT_USERS = 'UPDATE_GIT_USERS';\nexport var FETCH_USERS = 'FETCH_USERS';\nvar initialState = {\n  gitUsers: [],\n  currentItem: null,\n  workingList: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_CURRENT_VALUE:\n      return _objectSpread({}, state, {\n        currentItem: action.currentValue // case UPDATE_GIT_USERS:\n        //     return {\n        //         ...state,\n        //         user: action.user\n        //     }\n\n      });\n\n    case UPDATE_GIT_USERS:\n      return _objectSpread({}, state, {\n        gitUsers: [].concat(_toConsumableArray(state.gitUsers), [action.user])\n      });\n\n    case FETCH_USERS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n});\nexport var getUserData = function getUserData(val) {\n  return function (dispatch) {\n    var zipCodeapiUrl = \"https://api.github.com/users/\".concat(val);\n    return fetch(zipCodeapiUrl).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log(JSON.stringify(json));\n      dispatch({\n        type: UPDATE_GIT_USERS,\n        user: json\n      });\n    });\n  };\n};\nexport var addUser = function addUser(newUser) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('add user action: ', newUser);\n                gitusersRef.push().set(newUser);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addUser2 = function addUser2(val) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var zipCodeapiUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                zipCodeapiUrl = \"https://api.github.com/users/\".concat(val);\n                return _context2.abrupt(\"return\", fetch(zipCodeapiUrl).then(function (response) {\n                  return response.json();\n                }).then(gitusersRef.push().set(val)).then(function (json) {\n                  console.log(JSON.stringify(json));\n                  dispatch({\n                    type: UPDATE_GIT_USERS,\n                    user: json\n                  });\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUsers = function fetchUsers() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                gitusersRef.on(\"value\", function (snapshot) {\n                  dispatch({\n                    type: FETCH_USERS,\n                    payload: snapshot.val()\n                  });\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function getGitUser(val) {\n  console.log('gituser value: ', val);\n  var gitUrl = 'https://api.github.com/users/rich';\n  var fetchResult;\n  return fetch(gitUrl).then(function (response) {\n    return response.json();\n  }).then(function (myJson) {\n    console.log(JSON.stringify(myJson));\n    fetchResult = myJson;\n  });\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_GIT_USERS,\n      user: fetchResult\n    });\n  };\n} // export function addUserObject(val) {\n//     console.log('got this far addUserObject')\n//     return dispatch => {\n//         console.log('got to dispatch')\n//         dispatch({\n//             type: UPDATE_GIT_USERS,\n//             currentValue: val   \n//         })\n//     }    \n// }\n\nexport function updateCurrentValue(val) {\n  console.log('updateCurrentValue: ', val);\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_CURRENT_VALUE,\n      currentValue: val\n    });\n  };\n}\nexport function updateWorkingList(val) {\n  console.log('update working list: ', val);\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_CURRENT_VALUE,\n      currentValue: val\n    });\n  };\n}","map":{"version":3,"sources":["/Users/rnayl2/sites/for_side/src/modules/lists.js"],"names":["gitusersRef","UPDATE_CURRENT_VALUE","UPDATE_WORKING_LIST","UPDATE_GIT_USERS","FETCH_USERS","initialState","gitUsers","currentItem","workingList","state","action","type","currentValue","user","payload","getUserData","val","dispatch","zipCodeapiUrl","fetch","then","response","json","console","log","JSON","stringify","addUser","newUser","push","set","addUser2","fetchUsers","on","snapshot","getGitUser","gitUrl","fetchResult","myJson","updateCurrentValue","updateWorkingList"],"mappings":"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","sourcesContent":["import { gitusersRef } from '../config/firebase'\n\nexport const UPDATE_CURRENT_VALUE = 'UPDATE_CURRENT_VALUE'\nexport const UPDATE_WORKING_LIST = 'UPDATE_WORKING_LIST'\nexport const UPDATE_GIT_USERS = 'UPDATE_GIT_USERS'\nexport const FETCH_USERS = 'FETCH_USERS'\n\nconst initialState = {\n    gitUsers: [],\n    currentItem: null,\n    workingList: [],\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_CURRENT_VALUE:\n            return {\n                ...state,\n                currentItem: action.currentValue\n            }\n        // case UPDATE_GIT_USERS:\n        //     return {\n        //         ...state,\n        //         user: action.user\n        //     }\n        case UPDATE_GIT_USERS:\n            return {\n                ...state,\n                gitUsers: [...state.gitUsers, action.user]\n            }\n        case FETCH_USERS:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport const getUserData = (val) => dispatch => {\n    const zipCodeapiUrl = `https://api.github.com/users/${val}`\n    return fetch(zipCodeapiUrl)\n        .then(response => response.json())\n        .then(json => {\n            console.log(JSON.stringify(json))\n            dispatch({\n                type: UPDATE_GIT_USERS,\n                user: json\n            })\n        })\n}\n\nexport const addUser = newUser => async dispatch => {\n    console.log('add user action: ', newUser)\n    gitusersRef.push().set(newUser)\n}\n\nexport const addUser2 = (val) => async dispatch => {\n    const zipCodeapiUrl = `https://api.github.com/users/${val}`\n    return fetch(zipCodeapiUrl)\n        .then(response => response.json())\n        .then(gitusersRef.push().set(val))\n        .then(json => {\n            console.log(JSON.stringify(json))\n            dispatch({\n                type: UPDATE_GIT_USERS,\n                user: json\n            })\n        })\n} \n\nexport const fetchUsers = () => async dispatch => {\n    gitusersRef.on(\"value\", snapshot => {\n      dispatch({\n        type: FETCH_USERS,\n        payload: snapshot.val()\n      })\n    })\n  };\n\nexport function getGitUser (val) {\n    console.log('gituser value: ', val)\n    const gitUrl = 'https://api.github.com/users/rich'\n    let fetchResult\n    return fetch(gitUrl)\n        .then((response) => {\n            return response.json()\n        })\n        .then((myJson) => {\n            console.log(JSON.stringify(myJson))\n            fetchResult = myJson\n        })\n    return dispatch => {\n        dispatch({\n            type: UPDATE_GIT_USERS,\n            user: fetchResult\n        })\n    }\n}\n\n\n// export function addUserObject(val) {\n//     console.log('got this far addUserObject')\n//     return dispatch => {\n//         console.log('got to dispatch')\n//         dispatch({\n//             type: UPDATE_GIT_USERS,\n//             currentValue: val   \n//         })\n//     }    \n// }\n\nexport function updateCurrentValue(val) {\n    console.log('updateCurrentValue: ', val)\n    return dispatch => {\n        dispatch({\n            type: UPDATE_CURRENT_VALUE,\n            currentValue: val\n        })\n    }\n}\n\nexport function updateWorkingList(val) {\n    console.log('update working list: ', val)\n    return dispatch => {\n        dispatch({\n            type: UPDATE_CURRENT_VALUE,\n            currentValue: val\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}